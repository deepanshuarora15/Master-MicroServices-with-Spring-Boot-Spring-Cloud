1. The code that we have till now is of the pattern : Bean & corresponding DaoService.
2. This would lead to lot of repetition of code : for every Bean that we create, we would have to create a DaoService.
3. We can use Spring data JPA instead to save ourselves this effort. With Springdata.jpa, we would not have to build DaoService
   at all and instead would be able to make use of interfaces.
4. UserRepository.java

package com.rest.webservices.restfulwebservices.jpatutorial;

import org.springframework.data.jpa.repository.JpaRepository;

public interface UserRepository extends JpaRepository<User, Long> {
	
}


5. UserDaoServiceCommandLineRunner.java

package com.rest.webservices.restfulwebservices.jpatutorial;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

@Component
public class UserDaoServiceCommandLineRunner implements CommandLineRunner{
	
	private static final Logger log = LoggerFactory.getLogger(UserDaoServiceCommandLineRunner.class);
	
	@Autowired
	private UserRepository userRepository;
	@Override
	public void run(String... args) throws Exception {
		// TODO Auto-generated method stub
		User user = new User("Jill", "Admin");
		userRepository.save(user);
		log.info("New user is created " + user);
		
	}

}


